generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                      String        @id @default(cuid())
  name                    String?
  email                   String      @unique
  passwordHash            String?
  profileImageUrl         String?       @db.VarChar(2083)
  gender                  Gender?
  isBanned                Boolean       @default(false)
  dateJoined              DateTime      @default(now())
  createdAt               DateTime      @default(now())
  updatedAt               DateTime      @updatedAt
  authType                AuthType      @default(EMAIL)
  lastProcessed           DateTime      @default(now())
  subscription            Subscription? @relation("UserSubscription")
  onboardedDefaultCreator Boolean       @default(false)
  creators                Creator[]

  @@index([email])
}



model Creator {
  id                       String            @id @default(cuid())
  userId                   String
  name                     String?            @db.VarChar(150)
  onlyFansUrl              String?           @db.VarChar(2083)
  gender                   Gender?
  dateCreated              DateTime          @default(now())
  instagramProfileImageUrl String?           @db.VarChar(2083)
  isActive                 Boolean           @default(false)
  messageLimit             Int?
  instagramAccessToken     String?
  instagramRefreshToken    String?
  instagramUsername        String?
  instagramProfileId       String?
  instagramAccountId       String?           @unique
  createdAt                DateTime          @default(now())
  updatedAt                DateTime          @updatedAt
  usedCredits              Int               @default(0)
  needsReconnection        Boolean           @default(false)
  connectedInstagram       Boolean           @default(false)
  connectedCreator         Boolean           @default(false)
  afterCursor              String?
  profileImageUrl          String?
  user                     User              @relation(fields: [userId], references: [id], onDelete: Cascade)
  conversations            Conversation[]
  botSettings              BotSettings?
  ctaSettings              CTASettings?
  followUpSettings         FollowUpSettings?
  links                    CreatorLink[]
  totalSessions            Int               @default(0)
  maxCredit                Int               @default(0)

  @@index([userId])
  @@index([name])
}

model CreatorLink {
  id        String   @id @default(cuid())
  creatorId String
  linkId    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  shortLink String
  key String
  creator Creator @relation(fields: [creatorId], references: [id], onDelete: Cascade)

  @@index([creatorId])
}

model CTASettings {
  id             String  @id @default(cuid())
  creatorId      String  @unique
  ctaMessage     String?
  ctaButtonLabel String  @default("Subscribe")
  ctaButtonLink  String? @db.VarChar(2083)
  ctaContent     String?
  ctaImageUrl    String? @db.VarChar(2083)

  creator Creator @relation(fields: [creatorId], references: [id], onDelete: Cascade)
}

model FollowUpSettings {
  id                  String  @id @default(cuid())
  creatorId           String  @unique
  followUpButtonLabel String  @default("Spicy üå∂Ô∏è")
  followUpContent     String?
  followUpButtonLink  String?
  followUpImageUrl    String?
  creator             Creator @relation(fields: [creatorId], references: [id], onDelete: Cascade)
}

model Conversation {
  id                      String   @id @default(cuid())
  creatorId               String
  instagramConversationId String
  receiverProfileImageUrl String   @db.VarChar(2083)
  senderProfileImageUrl   String   @db.VarChar(2083)
  sentCta                 Boolean  @default(false)
  sentFollowUp            Boolean  @default(false)
  repliedToLastMessage    Boolean  @default(false)
  lastMessageAt           DateTime @default(now())
  createdAt               DateTime @default(now())
  updatedAt               DateTime @updatedAt
  replied                 Boolean  @default(false)
  creator  Creator   @relation(fields: [creatorId], references: [id], onDelete: Cascade)
  messages Message[]

  @@index([creatorId])
  @@index([lastMessageAt])
}

model Message {
  id               String      @id @default(cuid())
  conversationId   String
  content          String
  senderId         String
  receiverId       String
  senderUsername   String
  receiverUsername String
  timestamp        DateTime    @default(now())
  isRead           Boolean     @default(false)
  buttonLink       String?     @db.VarChar(2083)
  buttonLabel      String?
  type             MessageType @default(TEXT)

  conversation Conversation @relation(fields: [conversationId], references: [id], onDelete: Cascade)

  @@index([conversationId])
  @@index([senderId])
  @@index([receiverId])
  @@index([timestamp])
}

model BotSettings {
  id                      String        @id @default(cuid())
  creatorId               String        @unique
  isActive                Boolean       @default(false)
  autoRespondTo           AutoRespondTo
  messageDelay            Int           @default(0)
  greetingMessageDelay    Int           @default(0)
  followUpMessageDelay    Int           @default(0)
  ctaMessageDelay         Int           @default(0)
  isGreetingMessageActive Boolean       @default(false)
  greetingMessage         String?
  isFollowUpMessageActive Boolean       @default(false)
  responseStyle           Decimal       @default(0.5)
  timeZone                String        @default("UTC")
  isScheduleEnabled       Boolean       @default(false)
  createdAt               DateTime      @default(now())
  updatedAt               DateTime      @updatedAt
  scheduleName            String?
  lastConversationFetchTime DateTime?  
  interactionSetting      Int           @default(4)
  creator       Creator        @relation(fields: [creatorId], references: [id], onDelete: Cascade)
  scheduleItems ScheduleItem[]

  @@index([creatorId])
}


model ScheduleItem {
  id          String   @id @default(cuid())
  scheduleName String
  scheduleStart DateTime?
  scheduleEnd DateTime?
  scheduleDays Int[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  timeZone String @default("UTC")
  botSettings BotSettings @relation(fields: [botSettingsId], references: [id], onDelete: Cascade)
  botSettingsId String
  isScheduleEnabled Boolean @default(false)
}

model Subscription {
  id          String   @id @default(cuid())
  plan        String
  status      String
  credits     Int
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  usedCredits Int?
  customerId  String?
  priceId     String?
  interval    String?

  user   User   @relation("UserSubscription", fields: [userId], references: [id])
  userId String @unique
}

enum Gender {
  MALE
  FEMALE
  OTHER
  PREFER_NOT_TO_SAY
}

enum AutoRespondTo {
  ALL
  FOLLOWERS
  VERIFIED
  NONE
}

enum AuthType {
  EMAIL
  GOOGLE
}

enum MessageType {
  TEXT
  IMAGE
  CTA
  FOLLOW_UP
  GREETING
}


model Client {
  id        String   @id @default(uuid())
  email     String   @unique
  name      String
  apiToken  String   @unique
  isActive  Boolean  @default(true)
  credits   Int      @default(0)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}